---
title: "Homework 3"
author: "[Danny Dawson]{style='background-color: yellow;'}"
toc: true
title-block-banner: true
title-block-style: default
#format: html
format: pdf
---

[Link to the Github repository](https://github.com/psu-stat380/hw-3)

---

::: {.callout-important style="font-size: 0.8em;"}
## Due: Thu, Mar 2, 2023 @ 11:59pm

Please read the instructions carefully before submitting your assignment.

1. This assignment requires you to only upload a `PDF` file on Canvas
1. Don't collapse any code cells before submitting. 
1. Remember to make sure all your code output is rendered properly before uploading your submission.

⚠️ Please add your name to the author information in the frontmatter before submitting your assignment ⚠️
:::

For this assignment, we will be using the [Wine Quality](https://archive.ics.uci.edu/ml/datasets/wine+quality) dataset from the UCI Machine Learning Repository. The dataset consists of red and white _vinho verde_ wine samples, from the north of Portugal. The goal is to model wine quality based on physicochemical tests

We will be using the following libraries:

```{R}
library(readr)
library(tidyr)
library(dplyr)
library(purrr)
library(car)
library(glmnet)
library(corrplot)
```

# Appendix


#### Convenience function for creating a formula object

The following function which takes as input a vector of column names `x` and outputs a `formula` object with `quality` as the response variable and the columns of `x` as the covariates. 

```{R}
make_formula <- function(x){
  as.formula(
    paste("quality ~ ", paste(x, collapse = " + "))
  )
}

# For example the following code will
# result in a formula object
# "quality ~ a + b + c"
make_formula(c("a", "b", "c"))
```

#### Convenience function for `glmnet`

The `make_model_matrix` function below takes a `formula` as input and outputs a **rescaled** model matrix `X` in a format amenable for `glmnet()`

```{R}
make_model_matrix <- function(formula){
  X <- model.matrix(formula, df)[, -1]
  cnames <- colnames(X)
  for(i in 1:ncol(X)){
    if(!cnames[i] == "typewhite"){
      X[, i] <- scale(X[, i])
    } else {
      colnames(X)[i] <- "type"
    }
  }
  return(X)
}
```





<br><br><br><br>
---

## Question 1
::: {.callout-tip}
## 50 points
Regression with categorical covariate and $t$-Test
:::

###### 1.1 (5 points)

Read the wine quality datasets from the specified URLs and store them in data frames `df1` and `df2`.

```{R}
url1 <- "https://archive.ics.uci.edu/ml/machine-learning-databases/wine-quality/winequality-white.csv"

url2 <- "https://archive.ics.uci.edu/ml/machine-learning-databases/wine-quality/winequality-red.csv"


df1 <- read.csv(url1, sep = ';')  #values separated by semi-colons, not commas
df2 <- read.csv(url2, sep = ';')
```

---

###### 1.2 (5 points)

Perform the following tasks to prepare the data frame `df` for analysis:

1. Combine the two data frames into a single data frame `df`, adding a new column called `type` to indicate whether each row corresponds to white or red wine. 
2. Rename the columns of `df` to replace spaces with underscores
3. Remove the columns `fixed_acidity` and `free_sulfur_dioxide`
4. Convert the `type` column to a factor
5. Remove rows (if any) with missing values.


```{R}
new_col_names <- c("fixed_acidity","volatile_acidity", "citric_acid", "residual_sugar",
                   "chlorides","free_sulfur_dioxide", "total_sulfur_dioxide", "density",
                   "pH", "sulphates", "alcohol","quality", "type")
df1$type <- "White" 
df2$type <- "Red"
df <- merge(df1, df2, all = TRUE)

colnames(df) <- c(new_col_names) 

df[,"type"] <- as.factor(df[, "type"])

df <- 
  df %>%
    select(-c(fixed_acidity, free_sulfur_dioxide)) %>%
    drop_na()

dim(df)
```


Your output to `R dim(df)` should be
```
[1] 6497   11
```

---

###### 1.3 (20 points)

Recall from STAT 200, the method to compute the $t$ statistic for the the difference in means (with the equal variance assumption)

1. Using `df` compute the mean of `quality` for red and white wine separately, and then store the difference in means as a variable called `diff_mean`. 

2. Compute the pooled sample variance and store the value as a variable called `sp_squared`. 

3. Using `sp_squared` and `diff_mean`, compute the $t$ Statistic, and store its value in a variable called `t1`.


```{R}
white_quality <- df%>%
  filter(type == "White") %>%
  select(quality) %>%
  summarise(ww_quality_mean = mean(quality))

red_quality <- df %>%
  filter(type == "Red") %>%
  select(quality) %>%
  summarise(rw_quality_mean = mean(quality))

diff_mean <- white_quality - red_quality
diff_mean

white_qualities <- df1$quality
red_qualities <- df2$quality

ww_variance <- var(white_qualities)  #variance of the white wine
rw_variance <- var(red_qualities)  # variance of the red wine 

n1 <- length(white_qualities)   #how many white wine quality measurements there are 
n2 <- length(red_qualities)   #how many red wine quality measurements there are

sp_squared <- ((n1 - 1)*ww_variance + (n2 - 1)*rw_variance)/ (n1 + n2 - 2)
sp_squared

denom <- (1/n1) + (1/n2)   #part of the denominator for the t-statistic calculation

t1 <- diff_mean / (sqrt(sp_squared * denom))
t1
```


---

###### 1.4 (10 points)

Equivalently, R has a function called `t.test()` which enables you to perform a two-sample $t$-Test without having to compute the pooled variance and difference in means. 

Perform a two-sample t-test to compare the quality of white and red wines using the `t.test()` function with the setting `var.equal=TRUE`. Store the t-statistic in `t2`.

```{R}
t_test <- t.test(white_qualities,red_qualities , var.equal = TRUE) 
t2 <- 9.6856
t_test
```

---

###### 1.5 (5 points)

Fit a linear regression model to predict `quality` from `type` using the `lm()` function, and extract the $t$-statistic for the `type` coefficient from the model summary. Store this $t$-statistic in `t3`.

```{R}
x <- df$type
y <- df$quality
fit <- lm(y ~ x)
summary(fit)
t3 <- 9.686
```


---

###### 1.6  (5 points)

Print a vector containing the values of `t1`, `t2`, and `t3`. What can you conclude from this? Why?

```{R}
c(t1, t2, t3) 
```

No matter which method you use to obtain the t-statistic, you will obtain the same value for the t-statistic each time. 


<br><br><br><br>
<br><br><br><br>
---

## Question 2
::: {.callout-tip}
## 25 points
Collinearity
:::

---

###### 2.1 (5 points)

Fit a linear regression model with all predictors against the response variable `quality`. Use the `broom::tidy()` function to print a summary of the fitted model. What can we conclude from the model summary?


```{R}
y <- df$quality
model <- lm(y ~ ., df)
broom::tidy(model)
```

Due to the low p-values, we can conclude that some of these variables can be considered predictors of quality by themselves. Those variables are alcohol, sulphates, pH, total_sulfur_dioxide, residual_sugar, and volatile_acidity (if we use a 0.05 significance level). 

---

###### 2.2 (10 points)

Fit two **simple** linear regression models using `lm()`: one with only `citric_acid` as the predictor, and another with only `total_sulfur_dioxide` as the predictor. In both models, use `quality` as the response variable. How does your model summary compare to the summary from the previous question?


```{R}
x <- df$citric_acid
y <- df$quality

model_citric <- lm(y ~ x)
summary(model_citric)
```

```{R}
x <- df$total_sulfur_dioxide
y <- df$quality

model_sulfur <- lm(y ~ x)
summary(model_sulfur)
```

The citric_acid in the previous model did not have a low enough p-value to be considered a predictor of quality, but when tested solely on its own, it can be considered a predictor. We can conclude that variables can have different levels of significance depending on whether they are tested on their own or against other potential predictors. 


---

###### 2.3 (5 points)

Visualize the correlation matrix of all numeric columns in `df` using `corrplot()`

```{R}
cor_grid <- df %>% keep(is.numeric) %>% cor()
corrplot(cor_grid, type = "upper")  #removes the redundant bottom half of the corrplot
```

---

###### 2.4 (5 points)

Compute the variance inflation factor (VIF) for each predictor in the full model using `vif()` function. What can we conclude from this?


```{R}
y <- df$quality
full_model <- lm(y ~ ., df)
vif(full_model) %>% knitr::kable()
```

The VIF threshold is 2, so we can say that the variables type, alcohol, density, total_sulfur_dioxide, residual_sugar, and volatile_acidity could be influenced by their correlation with other variables.


<br><br><br><br>
<br><br><br><br>
---

## Question 3
::: {.callout-tip}
## 40 points

Variable selection
:::


---

###### 3.1 (5 points)

Run a backward stepwise regression using a `full_model` object as the starting model. Store the final formula in an object called `backward_formula` using the built-in `formula()` function in R

```{R}
full_model <- lm(quality ~ ., df)
null_model <- lm(quality ~ 1, df)
backward_model <- step(full_model, direction = 'backward', scope = formula(full_model))
summary(backward_model)
backward_formula <- formula(backward_model)
backward_formula
```

---

###### 3.2 (5 points)

Run a forward stepwise regression using a `null_model` object as the starting model. Store the final formula in an object called `forward_formula` using the built-in `formula()` function in R

```{R}
full_model <- lm(quality ~ ., df)
null_model <- lm(quality ~ 1, df)
forward_model <- step(null_model, direction = 'forward', scope = formula(full_model))
summary(forward_model)
forward_formula <- formula(forward_model)
forward_formula
```


---

###### 3.3  (10 points)

1. Create a `y` vector that contains the response variable (`quality`) from the `df` dataframe. 

2. Create a design matrix `X` for the `full_model` object using the `make_model_matrix()` function provided in the Appendix. 

3. Then, use the `cv.glmnet()` function to perform LASSO and Ridge regression with `X` and `y`.

```{R}
y <- df$quality
X <- make_model_matrix(full_model)

colnames(X) <- c("volatile_acidity", "citric_acid", "residual_sugar",
                   "chlorides", "total_sulfur_dioxide", "density",
                   "pH", "sulphates", "alcohol", "type")



lambdas <- 10 ^ seq(-2, 1, length.out = 1000)   #gives a set of values to try for lambda

lasso <- cv.glmnet(X, y, alpha = 1, lambda = lambdas)

ridge <- cv.glmnet(X, y, alpha = 0, lambda = lambdas)
```

Create side-by-side plots of the ridge and LASSO regression results. Interpret your main findings. 

```{R}
par(mfrow=c(1, 2))
plot(lasso)
plot(ridge)
```

---

###### 3.4  (5 points)

Print the coefficient values for LASSO regression at the `lambda.1se` value? What are the variables selected by LASSO? 

Store the variable names with non-zero coefficients in `lasso_vars`, and create a formula object called `lasso_formula` using the `make_formula()` function provided in the Appendix. 


```{r}
lasso_coef <- coef(lasso, s = "lambda.1se")
selected_vars <- rownames(lasso_coef)[which(abs(lasso_coef) > 0)][-1]
lasso_coef
```

The variables selected by LASSO are volatile_acidity, residual sugar, sulphates, and alcohol. 

```{r}
lasso_formula <- make_formula(selected_vars)
lasso_formula
```

---

###### 3.5  (5 points)

Print the coefficient values for ridge regression at the `lambda.1se` value? What are the variables selected here? 

Store the variable names with non-zero coefficients in `ridge_vars`, and create a formula object called `ridge_formula` using the `make_formula()` function provided in the Appendix. 

```{r}
ridge_coef <- coef(ridge, s = "lambda.1se")
ridge_vars <- rownames(ridge_coef)[which(abs(ridge_coef) > 0)][-1]
ridge_coef
```

All of the variables are selected in ridge regression. 

```{r}
ridge_formula <- make_formula(ridge_vars)
ridge_formula
```



---

###### 3.6  (10 points)

What is the difference between stepwise selection, LASSO and ridge based on you analyses above?

They all end up with different formulas / variable selections. Stepwise selection ends up with every variable except total sulfur dioxide and citric acid. 

```{r}
backward_formula
forward_formula
```
The LASSO regression process gives the least amount of variables in its final equation, with only 4 predictors being chosen. The 4 predictors being volatile_acidity, residual_sugar, sulphates, and alcohol. 


```{r}
lasso_formula
```
Ridge regression had every predictor in its final formula. 

```{r}
ridge_formula
```

<br><br><br><br>
<br><br><br><br>
---

## Question 4
::: {.callout-tip}
## 70 points

Variable selection
:::

---

###### 4.1  (5 points)

Excluding `quality` from `df` we have $10$ possible predictors as the covariates. How many different models can we create using any subset of these $10$ covariates as possible predictors? Justify your answer. 

There are 10 different covariates, and there is no restriction on how many or how few that can be used in a model, so in order to find the different amount of models that can be used, the sum of 10 C r needs to be calculated, where r is 1-10. 

The total amount of models that can be created is 1023. 

---


###### 4.2  (20 points)

Store the names of the predictor variables (all columns except `quality`) in an object called `x_vars`.

```{R}
x_vars <- colnames(df %>% select(-quality))
```

Use: 

* the `combn()` function (built-in R function) and 
* the `make_formula()` (provided in the Appendix) 

to **generate all possible linear regression formulas** using the variables in `x_vars`. This is most optimally achieved using the `map()` function from the `purrr` package.

```{R}
formulas <- map(
  1:length(x_vars),
  \(x){
    vars <- combn(x_vars, x, simplify = FALSE) # simplify = false creates a list instead of an array 
    map(vars, make_formula)  #applies the make formula function to the combination of all vars 
  }
) %>% unlist()  #unlists the list made earlier
```

If your code is right the following command should return something along the lines of:

```{R}
sample(formulas, 4) %>% as.character()
# Output:
# [1] "quality ~ volatile_acidity + residual_sugar + density + pH + alcohol"                                                 
# [2] "quality ~ citric_acid"                                                                                                
# [3] "quality ~ volatile_acidity + citric_acid + residual_sugar + total_sulfur_dioxide + density + pH + sulphates + alcohol"
# [4] "quality ~ citric_acid + chlorides + total_sulfur_dioxide + pH + alcohol + type"  
```

---

###### 4.3  (10 points)
Use `map()` and `lm()` to fit a linear regression model to each formula in `formulas`, using `df` as the data source. Use `broom::glance()` to extract the model summary statistics, and bind them together into a single tibble of summaries using the `bind_rows()` function from `dplyr`.

```{R}
models <- map(formulas, ~lm(., df)) # need to create an lm model for all the new formulas
summaries <- map(models, ~broom::glance(.)) %>% bind_rows() # just need to map the glance function to all the new models,                                                                  then bind the rows together into a tibble
```


---


###### 4.4  (5 points)

Extract the `adj.r.squared` values from `summaries` and use them to identify the formula with the _**highest**_ adjusted R-squared value.

```{R}
adj_r_squared_vals <- summaries$adj.r.squared
adj_rsq_formula <- formulas[[which.max(adj_r_squared_vals)]]  #finds the formula with the maximum adj_r_squared
adj_rsq_formula
```

Store resulting formula as a variable called `rsq_formula`.

```{R}
rsq_formula <- adj_rsq_formula
```

---

###### 4.5  (5 points)

Extract the `AIC` values from `summaries` and use them to identify the formula with the **_lowest_** AIC value.


```{R}
aic_values <- summaries$AIC
best_aic_formula <- formulas[[which.min(aic_values)]]  # finds the formula with the minimum AIC value 
```

Store resulting formula as a variable called `aic_formula`.


```{R}
aic_formula <- best_aic_formula
aic_formula
```

---

###### 4.6  (15 points)

Combine all formulas shortlisted into a single vector called `final_formulas`.

```{R}
null_formula <- formula(null_model)
full_formula <- formula(full_model)

final_formulas <- c(
  null_formula,
  full_formula,
  backward_formula,
  forward_formula,
  lasso_formula, 
  ridge_formula,
  rsq_formula,
  aic_formula
)
final_formulas
```

* Are `aic_formula` and `rsq_formula` the same? How do they differ from the formulas shortlisted in question 3?

```{r}
aic_formula
rsq_formula
summaries
```

The AIC and RSQ formulas are not the same. They are very similar, but the RSQ formula includes total_sulfur_dioxide in its optimal model, while the AIC formula excludes it. 

* Which of these is more reliable? Why? 

* If we had a dataset with $10,000$ columns, which of these methods would you consider for your analyses? Why?

---

###### 4.7  (10 points)


Use `map()` and `glance()` to extract the `sigma, adj.r.squared, AIC, df`, and `p.value` statistics for each model obtained from `final_formulas`. Bind them together into a single data frame `summary_table`. Summarize your main findings.

```{R}
summary_table <- 
  map(final_formulas, 
  \(x) ~broom::glance %>% select('sigma', 'adj.r.squared', 'AIC', 'df', 'p.value')
) #%>% bind_rows()

summary_table #%>% knitr::kable()
```


:::{.hidden unless-format="pdf"}
\pagebreak
:::

<br><br><br><br>
<br><br><br><br>
---

::: {.callout-note collapse="true"}
## Session Information

Print your `R` session information using the following command

```{R}
sessionInfo()
```
:::